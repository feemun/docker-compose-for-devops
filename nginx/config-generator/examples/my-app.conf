# 示例配置：将 https://localhost/my-app 代理到 http://localhost:8080
# 这是一个完整的配置示例，展示如何使用服务别名进行代理

# HTTP server block - redirect to HTTPS
server {
    listen 80;
    server_name localhost;
    
    # Redirect all HTTP requests to HTTPS
    return 301 https://$server_name$request_uri;
}

# HTTPS server block
server {
    listen 443 ssl http2;
    server_name localhost;
    
    # SSL证书配置
    ssl_certificate /etc/ssl/certs/localhost.crt;
    ssl_certificate_key /etc/ssl/private/localhost.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    
    # Security headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    
    # Proxy configuration for my-app service
    # 将 https://localhost/my-app 代理到 http://localhost:8080
    # my-app 是服务别名，不是后台服务的实际路径
    location /my-app {
        # 去掉路径前缀，直接转发到后台服务根路径
        rewrite ^/my-app(.*) /$1 break;
        
        # 代理到后台服务，注意这里使用 host.docker.internal 访问宿主机服务
        proxy_pass http://host.docker.internal:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $server_name;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Buffer settings
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
    }
    
    # Default location - return 404 for undefined paths
    location / {
        return 404 "Service not found";
    }
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
}

# 使用说明：
# 1. 这个配置将 https://localhost/my-app 的所有请求代理到 http://localhost:8080
# 2. 路径重写：https://localhost/my-app/api/users -> http://localhost:8080/api/users
# 3. 静态资源：https://localhost/my-app/css/style.css -> http://localhost:8080/css/style.css
# 4. API请求：https://localhost/my-app/login -> http://localhost:8080/login
# 5. 服务别名 "my-app" 可以是任意名称，不需要与后台服务的实际路径匹配